group cStringTemplates;

fielddeclaration(type, name, arr, ptr)::= <<
%if(arr)% Array* %name%%else%%type% %name%%endif%%if(arr)% = NULL;%\n%%endif%%if(ptr)% = NULL;%\n%%else%;%endif%
>>

varpush(name) ::= <<
var_push(&%name%);%\n%
>>

varpop() ::= <<
for(numOfPush -= 1; numOfPush>= 0; numOfPush--){
   	  var_pop();
   }
   
   
>>

parameter(type, name) ::= <<
%type% %name%
>>

assignment(name, val)::= <<
%name%=%val%
>>

methoddeclaration(type,mname,args,name,body, numpush) ::= <<
%type% %mname%(%args;separator=", "%){
   int numOfPush;
   int length;
   int indexX;
   
   numOfPush = %numpush%;
   %body%
}%\n%
>>



mainmethoddeclaration(type,mname,args,name,body, numpush) ::= <<
%type% %mname%(%args;separator=", "%){
   int numOfPush;
   int length;
   int indexX;
   
   numOfPush = %numpush%;
   %body%
   
   for(numOfPush -= 1; numOfPush>= 0; numOfPush--){
   	  var_pop();
   }
   gc_dispose();
   return 0;
}%\n%
>>


ifstatement(exp, thenbody, elsebody)::= <<
if(%exp%){
   %thenbody%
   gc_mark();
   gc_sweep();
}%if(elsebody)%else{
   %elsebody%
   gc_mark();
   gc_sweep();
}%endif%
print_gc();gc_collect();

>>

booleanliteral(bool)::= <<
%bool%
>>

typedeclaration2(tname, body) ::= <<
struct S%tname%{
   %body%
};%\n%
>>

returnstatement(ret) ::= <<
return %ret%;
>>

infixexpression(left, op, right) ::= <<
%left% %op% %right%
>>

forstatement(decl, exp, incdec, body) ::= <<
for(%decl;separator=", "%; %exp%; %incdec;separator=", "%){
   %body%
   gc_mark();
   gc_sweep();
   }%\n%
   print_gc();gc_collect();
   
>>

postfix(name, type) ::= <<
%name%%type%
>>

prefix(name, type) ::= <<
%type%%name%
>>

methodinvoke(method, args) ::= <<
%method%(%args;separator=", "%)
>>

fieldaccess(exp, id) ::= <<
%exp%->%id%
>>

objectcreation2(type, size) ::= <<
malloc(sizeof(%type%)%if(size)%*%size%%endif%)
>>

objectcreation(type, size) ::= <<
New_%type%(%size%)
>>

objectcreationaray(type, size) ::= <<
New_Array(%if(size)%%size%%else%0%endif%)
>>

arrayinit(args, index, name) ::= <<
ARRAYGET(%name%, %index%) = %args%;%\n%
>>

arrayinit2(exp) ::= <<
%exp;separator=""%
>>

conditionalexpression(exp, then, elsee) ::= <<
%exp% ? %then% : %elsee%
>>

whilestatement(exp, body) ::= <<
while(%exp%){
   %body%
   gc_mark();
   gc_sweep();
   }%\n%
   print_gc();gc_collect();
   
>>

dostatement(body, exp) ::= <<
do{
   %body%
   gc_mark();
   gc_sweep();}while(%exp%);%\n%
   print_gc();gc_collect();
   
>>

arrayaccess2(exp, index) ::= <<
%exp%[%index%]
>>

arrayaccess(exp, index, type, type2) ::= <<
%if(type2)%((%type2%)%endif%%if(type)%((%type%)%endif%ARRAYGET(%exp%, %index%)%if(type)%)->value%endif%%if(type2)%)%endif%
>>

structprototype(tname) ::= <<
typedef struct S%tname% %tname%;
>>

typedeclaration(tname, body, numref, ptrs) ::= <<
NEW_STRUCT (S%tname%, %body%);%\n%
%if(numref)%NEW_CONST(%tname%, %numref%, ptr, %ptrs;separator=", "%);
%else% NEW_SIMPLECONST(%tname%);%endif%
>>

buildptr(name) ::= <<
&(ptr->%name%)
>>


methodprototype(type,mname,args) ::= <<
%type% %mname%(%args;separator=", "%);
>> 

expressionstatement(exp) ::= <<
%exp%;%\n%
>>

assert(exp) ::= <<
assert(%exp%)
>>

forloopinitarray(name, val, init) ::= <<
length = %name%->elemNum;
for(indexX=0; indexX<length; indexX++)
{
	ARRAYGET(%name%, indexX) = %init%(%val%);
	gc_mark();
	gc_sweep();
}
print_gc();gc_collect();

>>